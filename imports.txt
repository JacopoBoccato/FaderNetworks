from .logger import create_logger
from .model import get_attr_loss, flip_attributes
from .model import update_predictions, flip_attributes
from .utils import get_optimizer, clip_grad_norm, get_lambda, reload_model
from .utils import print_accuracies
from datetime import timedelta
from logging import getLogger
from src.evaluation import Evaluator
from src.evaluation import compute_accuracy
from src.loader import DataSampler
from src.loader import load_images, DataSampler
from src.loader import load_sequences
from src.loader import load_sequences, DataSampler
from src.loader import onehot_encode_sequences, get_alphabet
from src.loader import onehot_encode_sequences, save_onehot_dataset, get_alphabet
from src.logger import create_logger
from src.model import AutoEncoder
from src.model import AutoEncoder, LatentDiscriminator
from src.model import AutoEncoder, LatentDiscriminator, PatchDiscriminator, Classifier
from src.model import Classifier
from src.training import Trainer
from src.training import classifier_step
from src.utils import bool_flag
from src.utils import get_optimizer, reload_model, print_accuracies
from src.utils import initialize_exp, bool_flag, attr_flag, check_attr
from torch import nn
from torch.autograd import Variable
from torch.nn import ModuleList
from torch.nn import functional as F
from torchvision.utils import make_grid
from typing import List
import argparse
import inspect
import json
import logging
import matplotlib.image
import numpy as np
import os
import pickle
import random
import re
import subprocess
import time
import torch
import torch.optim as optim   # single import; avoids name collisions
